#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

void prepareText(char *text) {
    // Remove non-alphabetic characters and convert to uppercase
    int i, j = 0;
    for (i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            text[j++] = toupper(text[i]);
        }
    }
    text[j] = '\0';
}

char* railFenceEncrypt(char *plaintext, int rails) {
    int len = strlen(plaintext);

    // Create a 2D array to represent the rails
    char **fence = (char**)malloc(rails * sizeof(char*));
    for (int i = 0; i < rails; i++) {
        fence[i] = (char*)malloc(len * sizeof(char));
        memset(fence[i], '\0', len);
    }

    int row = 0, direction = 1; // 1 for down, -1 for up
    for (int i = 0; i < len; i++) {
        fence[row][i] = plaintext[i];

        if (rails > 1) {
            row += direction;
            if (row == 0 || row == rails - 1) {
                direction *= -1; // Change direction
            }
        }
    }

    // Read the ciphertext row by row
    char *ciphertext = (char*)malloc((len + 1) * sizeof(char));
    int index = 0;
    for (int i = 0; i < rails; i++) {
        for (int j = 0; j < len; j++) {
            if (fence[i][j] != '\0') {
                ciphertext[index++] = fence[i][j];
            }
        }
    }
    ciphertext[index] = '\0';

    // Free allocated memory
    for (int i = 0; i < rails; i++) {
        free(fence[i]);
    }
    free(fence);

    return ciphertext;
}

char* railFenceDecrypt(char *ciphertext, int rails) {
    int len = strlen(ciphertext);

    // Create a 2D array to represent the rails
    char **fence = (char**)malloc(rails * sizeof(char*));
    for (int i = 0; i < rails; i++) {
        fence[i] = (char*)malloc(len * sizeof(char));
        memset(fence[i], '\0', len);
    }

    // Mark the positions using zig-zag pattern
    int row = 0, direction = 1;
    for (int i = 0; i < len; i++) {
        fence[row][i] = '*';

        row += direction;
        if (row == 0 || row == rails - 1) {
            direction *= -1;
        }
    }

    // Fill the marked positions with ciphertext
    int index = 0;
    for (int i = 0; i < rails; i++) {
        for (int j = 0; j < len; j++) {
            if (fence[i][j] == '*' && index < len) {
                fence[i][j] = ciphertext[index++];
            }
        }
    }

    // Read the plaintext using zig-zag pattern again
    char *plaintext = (char*)malloc((len + 1) * sizeof(char));
    index = 0;
    row = 0;
    direction = 1;
    for (int i = 0; i < len; i++) {
        plaintext[index++] = fence[row][i];

        row += direction;
        if (row == 0 || row == rails - 1) {
            direction *= -1;
        }
    }
    plaintext[index] = '\0';

    // Free allocated memory
    for (int i = 0; i < rails; i++) {
        free(fence[i]);
    }
    free(fence);

    return plaintext;
}

int main() {
    char text[1000];
    int rails, choice;

    printf("Rail Fence Cipher\n");
    printf("1. Encrypt\n");
    printf("2. Decrypt\n");
    printf("Enter your choice (1 or 2): ");
    scanf("%d", &choice);
    getchar(); // Consume the newline

    printf("Enter text: ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = '\0'; // Remove newline character

    printf("Enter number of rails: ");
    scanf("%d", &rails);

    if (rails <= 1) {
        printf("Error: Number of rails must be greater than 1.\n");
        return 1;
    }

    char *result;
    if (choice == 1) {
        prepareText(text);  // Only for encryption
        result = railFenceEncrypt(text, rails);
        printf("Encrypted text: %s\n", result);
    } else if (choice == 2) {
        result = railFenceDecrypt(text, rails);
        printf("Decrypted text: %s\n", result);
    } else {
        printf("Invalid choice.\n");
        return 1;
    }

    free(result);
    return 0;
}
