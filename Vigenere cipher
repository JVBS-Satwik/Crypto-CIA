#include <stdio.h>
#include <string.h>
#include <ctype.h>

void vigenereEncrypt(char plaintext[], char key[]) {
    int plaintextLen = strlen(plaintext);
    int keyLen = strlen(key);
    int i, j;
    
    for (i = 0, j = 0; i < plaintextLen; i++) {
        char current = plaintext[i];
        
        if (isalpha(current)) {
            // Determine the case of the current character
            char base = isupper(current) ? 'A' : 'a';
            
            // Get the corresponding key character (cycling if necessary)
            char keyChar = key[j % keyLen];
            // Convert key character to 0-25 value (case insensitive)
            int keyShift = toupper(keyChar) - 'A';
            
            // Encrypt the character
            plaintext[i] = ((current - base + keyShift) % 26) + base;
            
            // Only increment j when we use a key character
            j++;
        }
        // Non-alphabetic characters are left unchanged
    }
}

int main() {
    char plaintext[1000];
    char key[100];
    
    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    // Remove newline character if present
    plaintext[strcspn(plaintext, "\n")] = '\0';
    
    printf("Enter key: ");
    fgets(key, sizeof(key), stdin);
    // Remove newline character if present
    key[strcspn(key, "\n")] = '\0';
    
    // Validate key (must contain only letters)
    for (int i = 0; key[i] != '\0'; i++) {
        if (!isalpha(key[i])) {
            printf("Error: Key must contain only alphabetic characters.\n");
            return 1;
        }
    }
    
    // Encrypt the plaintext
    vigenereEncrypt(plaintext, key);
    
    printf("Encrypted text: %s\n", plaintext);
    
    return 0;
}
