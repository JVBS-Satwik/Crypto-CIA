#include <stdio.h>
#include <string.h>
#include <ctype.h>

void runningKeyEncrypt(char plaintext[], char key[]) {
    int plaintextLen = strlen(plaintext);
    int keyLen = strlen(key);
    int i, j = 0;
    
    for (i = 0; i < plaintextLen; i++) {
        char current = plaintext[i];
        
        if (isalpha(current)) {
            // Determine the case of the current character
            char base = isupper(current) ? 'A' : 'a';
            
            // Find next alphabetic character in key
            while (j < keyLen && !isalpha(key[j])) {
                j++;
            }
            
            if (j >= keyLen) {
                printf("Warning: Key is too short. Some characters weren't encrypted.\n");
                return;
            }
            
            // Convert key character to 0-25 value (case insensitive)
            int keyShift = toupper(key[j]) - 'A';
            
            // Encrypt the character
            plaintext[i] = ((current - base + keyShift) % 26) + base;
            
            j++; // Move to next key character
        }
        // Non-alphabetic characters are left unchanged
    }
}

void runningKeyDecrypt(char ciphertext[], char key[]) {
    int ciphertextLen = strlen(ciphertext);
    int keyLen = strlen(key);
    int i, j = 0;
    
    for (i = 0; i < ciphertextLen; i++) {
        char current = ciphertext[i];
        
        if (isalpha(current)) {
            // Determine the case of the current character
            char base = isupper(current) ? 'A' : 'a';
            
            // Find next alphabetic character in key
            while (j < keyLen && !isalpha(key[j])) {
                j++;
            }
            
            if (j >= keyLen) {
                printf("Warning: Key is too short. Some characters weren't decrypted.\n");
                return;
            }
            
            // Convert key character to 0-25 value (case insensitive)
            int keyShift = toupper(key[j]) - 'A';
            
            // Decrypt the character
            ciphertext[i] = ((current - base - keyShift + 26) % 26) + base;
            
            j++; // Move to next key character
        }
        // Non-alphabetic characters are left unchanged
    }
}

int main() {
    char text[1000];
    char key[1000];
    int choice;
    
    printf("Running Key Cipher\n");
    printf("1. Encrypt\n");
    printf("2. Decrypt\n");
    printf("Enter your choice (1 or 2): ");
    scanf("%d", &choice);
    getchar(); // Consume the newline
    
    printf("Enter text: ");
    fgets(text, sizeof(text), stdin);
    // Remove newline character if present
    text[strcspn(text, "\n")] = '\0';
    
    printf("Enter key (long text, will use only alphabetic characters): ");
    fgets(key, sizeof(key), stdin);
    // Remove newline character if present
    key[strcspn(key, "\n")] = '\0';
    
    // Count alphabetic characters in key
    int alphaCount = 0;
    for (int i = 0; key[i] != '\0'; i++) {
        if (isalpha(key[i])) {
            alphaCount++;
        }
    }
    
    if (alphaCount == 0) {
        printf("Error: Key must contain at least one alphabetic character.\n");
        return 1;
    }
    
    if (choice == 1) {
        runningKeyEncrypt(text, key);
        printf("Encrypted text: %s\n", text);
    } else if (choice == 2) {
        runningKeyDecrypt(text, key);
        printf("Decrypted text: %s\n", text);
    } else {
        printf("Invalid choice.\n");
        return 1;
    }
    
    return 0;
}
